//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Nginx.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NginxDotnetParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class NginxParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, Value=15, STR_EXT=16, 
		Comment=17, REGEXP_PREFIXED=18, QUOTED_STRING=19, SINGLE_QUOTED=20, WS=21;
	public const int
		RULE_config = 0, RULE_statement = 1, RULE_genericStatement = 2, RULE_regexHeaderStatement = 3, 
		RULE_block = 4, RULE_genericBlockHeader = 5, RULE_if_statement = 6, RULE_if_body = 7, 
		RULE_regexp = 8, RULE_locationBlockHeader = 9, RULE_rewriteStatement = 10;
	public static readonly string[] ruleNames = {
		"config", "statement", "genericStatement", "regexHeaderStatement", "block", 
		"genericBlockHeader", "if_statement", "if_body", "regexp", "locationBlockHeader", 
		"rewriteStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "'if'", "'('", "')'", "'\\.'", "'^'", "'location'", 
		"'rewrite'", "'last'", "'break'", "'redirect'", "'permanent'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "Value", "STR_EXT", "Comment", "REGEXP_PREFIXED", "QUOTED_STRING", 
		"SINGLE_QUOTED", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Nginx.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NginxParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NginxParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NginxParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ConfigContext : ParserRuleContext {
		public NgxConfig ret;
		public StatementContext _statement;
		public BlockContext _block;
		public IToken _Comment;
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(NginxParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(NginxParser.Comment, i);
		}
		public ConfigContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_config; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterConfig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitConfig(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfig(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigContext config() {
		ConfigContext _localctx = new ConfigContext(Context, State);
		EnterRule(_localctx, 0, RULE_config);
		 _localctx.ret =  new NgxConfig(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 30;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 22;
					_localctx._statement = statement();
					 _localctx.ret.AddEntry(_localctx._statement.ret); 
					}
					break;
				case 2:
					{
					State = 25;
					_localctx._block = block();
					 _localctx.ret.AddEntry(_localctx._block.ret); 
					}
					break;
				case 3:
					{
					State = 28;
					_localctx._Comment = Match(Comment);
					 _localctx.ret.AddEntry(new NgxComment((_localctx._Comment!=null?_localctx._Comment.Text:null))); 
					}
					break;
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 427520L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public NgxParam ret;
		public RewriteStatementContext _rewriteStatement;
		public GenericStatementContext _genericStatement;
		public RegexHeaderStatementContext _regexHeaderStatement;
		[System.Diagnostics.DebuggerNonUserCode] public RewriteStatementContext rewriteStatement() {
			return GetRuleContext<RewriteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericStatementContext genericStatement() {
			return GetRuleContext<GenericStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexHeaderStatementContext regexHeaderStatement() {
			return GetRuleContext<RegexHeaderStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__9:
				{
				State = 34;
				_localctx._rewriteStatement = rewriteStatement();
				 _localctx.ret =  _localctx._rewriteStatement.ret; 
				}
				break;
			case Value:
				{
				State = 37;
				_localctx._genericStatement = genericStatement();
				 _localctx.ret =  _localctx._genericStatement.ret; 
				}
				break;
			case REGEXP_PREFIXED:
				{
				State = 40;
				_localctx._regexHeaderStatement = regexHeaderStatement();
				 _localctx.ret =  _localctx._regexHeaderStatement.ret; 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 45;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericStatementContext : ParserRuleContext {
		public NgxParam ret;
		public IToken _Value;
		public RegexpContext r;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Value() { return GetTokens(NginxParser.Value); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Value(int i) {
			return GetToken(NginxParser.Value, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexpContext[] regexp() {
			return GetRuleContexts<RegexpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexpContext regexp(int i) {
			return GetRuleContext<RegexpContext>(i);
		}
		public GenericStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterGenericStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitGenericStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericStatementContext genericStatement() {
		GenericStatementContext _localctx = new GenericStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_genericStatement);
		 _localctx.ret =  new NgxParam(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_localctx._Value = Match(Value);
			 _localctx.ret.AddValue((_localctx._Value!=null?_localctx._Value.Text:null)); 
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33184L) != 0)) {
				{
				State = 54;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
				case 1:
					{
					State = 49;
					_localctx._Value = Match(Value);
					 _localctx.ret.AddValue((_localctx._Value!=null?_localctx._Value.Text:null)); 
					}
					break;
				case 2:
					{
					State = 51;
					_localctx.r = regexp();
					 _localctx.ret.AddValue(_localctx.r.ret); 
					}
					break;
				}
				}
				State = 58;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexHeaderStatementContext : ParserRuleContext {
		public NgxParam ret;
		public IToken _REGEXP_PREFIXED;
		public IToken _Value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_PREFIXED() { return GetToken(NginxParser.REGEXP_PREFIXED, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Value() { return GetToken(NginxParser.Value, 0); }
		public RegexHeaderStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexHeaderStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterRegexHeaderStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitRegexHeaderStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexHeaderStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexHeaderStatementContext regexHeaderStatement() {
		RegexHeaderStatementContext _localctx = new RegexHeaderStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_regexHeaderStatement);
		 _localctx.ret =  new NgxParam(); 
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_localctx._REGEXP_PREFIXED = Match(REGEXP_PREFIXED);
			 _localctx.ret.AddValue((_localctx._REGEXP_PREFIXED!=null?_localctx._REGEXP_PREFIXED.Text:null)); 
			State = 61;
			_localctx._Value = Match(Value);
			 _localctx.ret.AddValue((_localctx._Value!=null?_localctx._Value.Text:null)); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public NgxBlock ret;
		public LocationBlockHeaderContext _locationBlockHeader;
		public GenericBlockHeaderContext _genericBlockHeader;
		public IToken _Comment;
		public StatementContext _statement;
		public BlockContext b;
		public If_statementContext _if_statement;
		[System.Diagnostics.DebuggerNonUserCode] public LocationBlockHeaderContext locationBlockHeader() {
			return GetRuleContext<LocationBlockHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GenericBlockHeaderContext genericBlockHeader() {
			return GetRuleContext<GenericBlockHeaderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comment() { return GetTokens(NginxParser.Comment); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment(int i) {
			return GetToken(NginxParser.Comment, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext[] if_statement() {
			return GetRuleContexts<If_statementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_statementContext if_statement(int i) {
			return GetRuleContext<If_statementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_block);
		 _localctx.ret =  new NgxBlock(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
				{
				State = 64;
				_localctx._locationBlockHeader = locationBlockHeader();
				 _localctx.ret.GetTokens().AddRange(_localctx._locationBlockHeader.ret); 
				}
				break;
			case Value:
				{
				State = 67;
				_localctx._genericBlockHeader = genericBlockHeader();
				 _localctx.ret.GetTokens().AddRange(_localctx._genericBlockHeader.ret); 
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment) {
				{
				State = 72;
				_localctx._Comment = Match(Comment);
				}
			}

			State = 75;
			Match(T__1);
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 427536L) != 0)) {
				{
				State = 87;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
				case 1:
					{
					State = 76;
					_localctx._statement = statement();
					 _localctx.ret.AddEntry(_localctx._statement.ret); 
					}
					break;
				case 2:
					{
					State = 79;
					_localctx.b = block();
					 _localctx.ret.AddEntry(_localctx.b.ret); 
					}
					break;
				case 3:
					{
					State = 82;
					_localctx._if_statement = if_statement();
					 _localctx.ret.AddEntry(_localctx._if_statement.ret); 
					}
					break;
				case 4:
					{
					State = 85;
					_localctx._Comment = Match(Comment);
					 _localctx.ret.AddEntry(new NgxComment((_localctx._Comment!=null?_localctx._Comment.Text:null))); 
					}
					break;
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 92;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericBlockHeaderContext : ParserRuleContext {
		public List<NgxToken> ret;
		public IToken _Value;
		public RegexpContext _regexp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Value() { return GetTokens(NginxParser.Value); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Value(int i) {
			return GetToken(NginxParser.Value, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexpContext[] regexp() {
			return GetRuleContexts<RegexpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexpContext regexp(int i) {
			return GetRuleContext<RegexpContext>(i);
		}
		public GenericBlockHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericBlockHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterGenericBlockHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitGenericBlockHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericBlockHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericBlockHeaderContext genericBlockHeader() {
		GenericBlockHeaderContext _localctx = new GenericBlockHeaderContext(Context, State);
		EnterRule(_localctx, 10, RULE_genericBlockHeader);
		 _localctx.ret =  new ArrayList<NgxToken>(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			_localctx._Value = Match(Value);
			 _localctx.ret.Add(new NgxToken((_localctx._Value!=null?_localctx._Value.Text:null))); 
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33184L) != 0)) {
				{
				State = 101;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 96;
					_localctx._Value = Match(Value);
					 _localctx.ret.Add(new NgxToken((_localctx._Value!=null?_localctx._Value.Text:null))); 
					}
					break;
				case 2:
					{
					State = 98;
					_localctx._regexp = regexp();
					 _localctx.ret.Add(new NgxToken(_localctx._regexp.ret)); 
					}
					break;
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public NgxIfBlock ret;
		public IToken id;
		public If_bodyContext _if_body;
		public StatementContext _statement;
		[System.Diagnostics.DebuggerNonUserCode] public If_bodyContext if_body() {
			return GetRuleContext<If_bodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comment() { return GetToken(NginxParser.Comment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 12, RULE_if_statement);
		 _localctx.ret =  new NgxIfBlock(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			_localctx.id = Match(T__3);
			 _localctx.ret.AddValue(new NgxToken((_localctx.id!=null?_localctx.id.Text:null))); 
			State = 108;
			_localctx._if_body = if_body();
			 _localctx.ret.GetTokens().AddRange(_localctx._if_body.ret); 
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comment) {
				{
				State = 110;
				Match(Comment);
				}
			}

			State = 113;
			Match(T__1);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 295936L) != 0)) {
				{
				{
				State = 114;
				_localctx._statement = statement();
				 _localctx.ret.AddEntry(_localctx._statement.ret); 
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 122;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		public List<NgxToken> ret;
		public IToken _Value;
		public RegexpContext _regexp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Value() { return GetTokens(NginxParser.Value); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Value(int i) {
			return GetToken(NginxParser.Value, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterIf_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitIf_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(Context, State);
		EnterRule(_localctx, 14, RULE_if_body);
		 _localctx.ret =  new ArrayList<NgxToken>(); 
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(T__4);
			State = 125;
			_localctx._Value = Match(Value);
			 _localctx.ret.Add(new NgxToken((_localctx._Value!=null?_localctx._Value.Text:null))); 
			State = 129;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				{
				State = 127;
				_localctx._Value = Match(Value);
				 _localctx.ret.Add(new NgxToken((_localctx._Value!=null?_localctx._Value.Text:null))); 
				}
				break;
			}
			State = 136;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 131;
				_localctx._Value = Match(Value);
				 _localctx.ret.Add(new NgxToken((_localctx._Value!=null?_localctx._Value.Text:null))); 
				}
				break;
			case 2:
				{
				State = 133;
				_localctx._regexp = regexp();
				 _localctx.ret.Add(new NgxToken(_localctx._regexp.ret)); 
				}
				break;
			}
			State = 138;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexpContext : ParserRuleContext {
		public String ret;
		public IToken id;
		public IToken _Value;
		public RegexpContext r;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Value() { return GetTokens(NginxParser.Value); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Value(int i) {
			return GetToken(NginxParser.Value, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexpContext[] regexp() {
			return GetRuleContexts<RegexpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexpContext regexp(int i) {
			return GetRuleContext<RegexpContext>(i);
		}
		public RegexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterRegexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitRegexp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexpContext regexp() {
		RegexpContext _localctx = new RegexpContext(Context, State);
		EnterRule(_localctx, 16, RULE_regexp);
		 _localctx.ret =  ""; 
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 151;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 151;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case T__6:
						{
						State = 140;
						_localctx.id = Match(T__6);
						 _localctx.ret += (_localctx.id!=null?_localctx.id.Text:null); 
						}
						break;
					case T__7:
						{
						State = 142;
						_localctx.id = Match(T__7);
						 _localctx.ret += (_localctx.id!=null?_localctx.id.Text:null); 
						}
						break;
					case Value:
						{
						State = 144;
						_localctx._Value = Match(Value);
						 _localctx.ret += (_localctx._Value!=null?_localctx._Value.Text:null); 
						}
						break;
					case T__4:
						{
						State = 146;
						Match(T__4);
						State = 147;
						_localctx.r = regexp();
						 _localctx.ret += "(" + _localctx.r.ret +  ")" ; 
						State = 149;
						Match(T__5);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocationBlockHeaderContext : ParserRuleContext {
		public List<NgxToken> ret;
		public IToken id;
		public IToken _Value;
		public RegexpContext _regexp;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Value() { return GetTokens(NginxParser.Value); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Value(int i) {
			return GetToken(NginxParser.Value, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public LocationBlockHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_locationBlockHeader; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterLocationBlockHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitLocationBlockHeader(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocationBlockHeader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocationBlockHeaderContext locationBlockHeader() {
		LocationBlockHeaderContext _localctx = new LocationBlockHeaderContext(Context, State);
		EnterRule(_localctx, 18, RULE_locationBlockHeader);
		 _localctx.ret =  new ArrayList<NgxToken>(); 
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_localctx.id = Match(T__8);
			 _localctx.ret.Add(new NgxToken((_localctx.id!=null?_localctx.id.Text:null))); 
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 157;
				_localctx._Value = Match(Value);
				 _localctx.ret.Add(new NgxToken((_localctx._Value!=null?_localctx._Value.Text:null))); 
				}
				break;
			}
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 161;
				_localctx._Value = Match(Value);
				 _localctx.ret.Add(new NgxToken((_localctx._Value!=null?_localctx._Value.Text:null))); 
				}
				break;
			case 2:
				{
				State = 163;
				_localctx._regexp = regexp();
				 _localctx.ret.Add(new NgxToken(_localctx._regexp.ret)); 
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RewriteStatementContext : ParserRuleContext {
		public NgxParam ret;
		public IToken id;
		public IToken _Value;
		public RegexpContext _regexp;
		public IToken opt;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Value() { return GetTokens(NginxParser.Value); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Value(int i) {
			return GetToken(NginxParser.Value, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public RewriteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rewriteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.EnterRewriteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INginxListener typedListener = listener as INginxListener;
			if (typedListener != null) typedListener.ExitRewriteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			INginxVisitor<TResult> typedVisitor = visitor as INginxVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRewriteStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RewriteStatementContext rewriteStatement() {
		RewriteStatementContext _localctx = new RewriteStatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_rewriteStatement);
		 _localctx.ret =  new NgxParam(); 
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			_localctx.id = Match(T__9);
			 _localctx.ret.AddValue((_localctx.id!=null?_localctx.id.Text:null)); 
			State = 175;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 170;
				_localctx._Value = Match(Value);
				 _localctx.ret.AddValue((_localctx._Value!=null?_localctx._Value.Text:null)); 
				}
				break;
			case 2:
				{
				State = 172;
				_localctx._regexp = regexp();
				 _localctx.ret.AddValue(_localctx._regexp.ret); 
				}
				break;
			}
			State = 177;
			_localctx._Value = Match(Value);
			 _localctx.ret.AddValue((_localctx._Value!=null?_localctx._Value.Text:null)); 
			State = 181;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) {
				{
				State = 179;
				_localctx.opt = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30720L) != 0)) ) {
					_localctx.opt = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				 _localctx.ret.AddValue((_localctx.opt!=null?_localctx.opt.Text:null)); 
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,21,184,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,4,0,31,8,
		0,11,0,12,0,32,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,44,8,1,1,1,1,1,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,55,8,2,10,2,12,2,58,9,2,1,3,1,3,1,3,1,
		3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,3,4,71,8,4,1,4,3,4,74,8,4,1,4,1,4,1,4,1,
		4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,88,8,4,10,4,12,4,91,9,4,1,4,1,4,
		1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,102,8,5,10,5,12,5,105,9,5,1,6,1,6,1,6,
		1,6,1,6,3,6,112,8,6,1,6,1,6,1,6,1,6,5,6,118,8,6,10,6,12,6,121,9,6,1,6,
		1,6,1,7,1,7,1,7,1,7,1,7,3,7,130,8,7,1,7,1,7,1,7,1,7,1,7,3,7,137,8,7,1,
		7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,152,8,8,11,8,12,
		8,153,1,9,1,9,1,9,1,9,3,9,160,8,9,1,9,1,9,1,9,1,9,1,9,3,9,167,8,9,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,3,10,176,8,10,1,10,1,10,1,10,1,10,3,10,182,
		8,10,1,10,0,0,11,0,2,4,6,8,10,12,14,16,18,20,0,1,1,0,11,14,200,0,30,1,
		0,0,0,2,43,1,0,0,0,4,47,1,0,0,0,6,59,1,0,0,0,8,70,1,0,0,0,10,94,1,0,0,
		0,12,106,1,0,0,0,14,124,1,0,0,0,16,151,1,0,0,0,18,155,1,0,0,0,20,168,1,
		0,0,0,22,23,3,2,1,0,23,24,6,0,-1,0,24,31,1,0,0,0,25,26,3,8,4,0,26,27,6,
		0,-1,0,27,31,1,0,0,0,28,29,5,17,0,0,29,31,6,0,-1,0,30,22,1,0,0,0,30,25,
		1,0,0,0,30,28,1,0,0,0,31,32,1,0,0,0,32,30,1,0,0,0,32,33,1,0,0,0,33,1,1,
		0,0,0,34,35,3,20,10,0,35,36,6,1,-1,0,36,44,1,0,0,0,37,38,3,4,2,0,38,39,
		6,1,-1,0,39,44,1,0,0,0,40,41,3,6,3,0,41,42,6,1,-1,0,42,44,1,0,0,0,43,34,
		1,0,0,0,43,37,1,0,0,0,43,40,1,0,0,0,44,45,1,0,0,0,45,46,5,1,0,0,46,3,1,
		0,0,0,47,48,5,15,0,0,48,56,6,2,-1,0,49,50,5,15,0,0,50,55,6,2,-1,0,51,52,
		3,16,8,0,52,53,6,2,-1,0,53,55,1,0,0,0,54,49,1,0,0,0,54,51,1,0,0,0,55,58,
		1,0,0,0,56,54,1,0,0,0,56,57,1,0,0,0,57,5,1,0,0,0,58,56,1,0,0,0,59,60,5,
		18,0,0,60,61,6,3,-1,0,61,62,5,15,0,0,62,63,6,3,-1,0,63,7,1,0,0,0,64,65,
		3,18,9,0,65,66,6,4,-1,0,66,71,1,0,0,0,67,68,3,10,5,0,68,69,6,4,-1,0,69,
		71,1,0,0,0,70,64,1,0,0,0,70,67,1,0,0,0,71,73,1,0,0,0,72,74,5,17,0,0,73,
		72,1,0,0,0,73,74,1,0,0,0,74,75,1,0,0,0,75,89,5,2,0,0,76,77,3,2,1,0,77,
		78,6,4,-1,0,78,88,1,0,0,0,79,80,3,8,4,0,80,81,6,4,-1,0,81,88,1,0,0,0,82,
		83,3,12,6,0,83,84,6,4,-1,0,84,88,1,0,0,0,85,86,5,17,0,0,86,88,6,4,-1,0,
		87,76,1,0,0,0,87,79,1,0,0,0,87,82,1,0,0,0,87,85,1,0,0,0,88,91,1,0,0,0,
		89,87,1,0,0,0,89,90,1,0,0,0,90,92,1,0,0,0,91,89,1,0,0,0,92,93,5,3,0,0,
		93,9,1,0,0,0,94,95,5,15,0,0,95,103,6,5,-1,0,96,97,5,15,0,0,97,102,6,5,
		-1,0,98,99,3,16,8,0,99,100,6,5,-1,0,100,102,1,0,0,0,101,96,1,0,0,0,101,
		98,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,1,0,0,0,104,11,1,0,
		0,0,105,103,1,0,0,0,106,107,5,4,0,0,107,108,6,6,-1,0,108,109,3,14,7,0,
		109,111,6,6,-1,0,110,112,5,17,0,0,111,110,1,0,0,0,111,112,1,0,0,0,112,
		113,1,0,0,0,113,119,5,2,0,0,114,115,3,2,1,0,115,116,6,6,-1,0,116,118,1,
		0,0,0,117,114,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,
		120,122,1,0,0,0,121,119,1,0,0,0,122,123,5,3,0,0,123,13,1,0,0,0,124,125,
		5,5,0,0,125,126,5,15,0,0,126,129,6,7,-1,0,127,128,5,15,0,0,128,130,6,7,
		-1,0,129,127,1,0,0,0,129,130,1,0,0,0,130,136,1,0,0,0,131,132,5,15,0,0,
		132,137,6,7,-1,0,133,134,3,16,8,0,134,135,6,7,-1,0,135,137,1,0,0,0,136,
		131,1,0,0,0,136,133,1,0,0,0,136,137,1,0,0,0,137,138,1,0,0,0,138,139,5,
		6,0,0,139,15,1,0,0,0,140,141,5,7,0,0,141,152,6,8,-1,0,142,143,5,8,0,0,
		143,152,6,8,-1,0,144,145,5,15,0,0,145,152,6,8,-1,0,146,147,5,5,0,0,147,
		148,3,16,8,0,148,149,6,8,-1,0,149,150,5,6,0,0,150,152,1,0,0,0,151,140,
		1,0,0,0,151,142,1,0,0,0,151,144,1,0,0,0,151,146,1,0,0,0,152,153,1,0,0,
		0,153,151,1,0,0,0,153,154,1,0,0,0,154,17,1,0,0,0,155,156,5,9,0,0,156,159,
		6,9,-1,0,157,158,5,15,0,0,158,160,6,9,-1,0,159,157,1,0,0,0,159,160,1,0,
		0,0,160,166,1,0,0,0,161,162,5,15,0,0,162,167,6,9,-1,0,163,164,3,16,8,0,
		164,165,6,9,-1,0,165,167,1,0,0,0,166,161,1,0,0,0,166,163,1,0,0,0,167,19,
		1,0,0,0,168,169,5,10,0,0,169,175,6,10,-1,0,170,171,5,15,0,0,171,176,6,
		10,-1,0,172,173,3,16,8,0,173,174,6,10,-1,0,174,176,1,0,0,0,175,170,1,0,
		0,0,175,172,1,0,0,0,176,177,1,0,0,0,177,178,5,15,0,0,178,181,6,10,-1,0,
		179,180,7,0,0,0,180,182,6,10,-1,0,181,179,1,0,0,0,181,182,1,0,0,0,182,
		21,1,0,0,0,21,30,32,43,54,56,70,73,87,89,101,103,111,119,129,136,151,153,
		159,166,175,181
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace NginxDotnetParser

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./Nginx.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NginxDotnetParser {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="NginxParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface INginxListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.config"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterConfig([NotNull] NginxParser.ConfigContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.config"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitConfig([NotNull] NginxParser.ConfigContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] NginxParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] NginxParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.genericStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericStatement([NotNull] NginxParser.GenericStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.genericStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericStatement([NotNull] NginxParser.GenericStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.regexHeaderStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegexHeaderStatement([NotNull] NginxParser.RegexHeaderStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.regexHeaderStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegexHeaderStatement([NotNull] NginxParser.RegexHeaderStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] NginxParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] NginxParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.genericBlockHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterGenericBlockHeader([NotNull] NginxParser.GenericBlockHeaderContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.genericBlockHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitGenericBlockHeader([NotNull] NginxParser.GenericBlockHeaderContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_statement([NotNull] NginxParser.If_statementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.if_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_statement([NotNull] NginxParser.If_statementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.if_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIf_body([NotNull] NginxParser.If_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.if_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIf_body([NotNull] NginxParser.If_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.regexp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRegexp([NotNull] NginxParser.RegexpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.regexp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRegexp([NotNull] NginxParser.RegexpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.locationBlockHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLocationBlockHeader([NotNull] NginxParser.LocationBlockHeaderContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.locationBlockHeader"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLocationBlockHeader([NotNull] NginxParser.LocationBlockHeaderContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="NginxParser.rewriteStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRewriteStatement([NotNull] NginxParser.RewriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="NginxParser.rewriteStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRewriteStatement([NotNull] NginxParser.RewriteStatementContext context);
}
} // namespace NginxDotnetParser
